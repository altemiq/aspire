name: .NET build

on:
  push:
    branches: 
      - main
    paths-ignore:
      - docs/**
      - .github/workflows/docs.yml
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-tests:
    strategy:
      matrix: 
        os: [ windows-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: false

    steps:
    - uses: actions/checkout@v4

    # Install .NET
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Run local/dotnet-restore@v1
      run: dotnet restore

    # Test
    - name: Run local/dotnet-test@v1
      run: >
        dotnet test
        --
        --results-directory ${{ github.workspace }}/coverage/results
        --coverage
        --coverage-output-format cobertura

    - uses: danielpalme/ReportGenerator-GitHub-Action@v5
      with:
        reports: "${{ github.workspace }}/coverage/results/*.cobertura.xml"
        targetdir: '${{ github.workspace }}/coverage/reports'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'
        verbosity: 'Verbose'

    - name: Run local/publish-test-results@v1
      shell: pwsh
      run: Get-Content '${{ github.workspace }}/coverage/reports/SummaryGithub.md' >> $env:GITHUB_STEP_SUMMARY

    - uses: actions/upload-artifact@v4
      with:
        name: coverage_${{ matrix.os }}
        path: ${{ github.workspace }}/coverage/reports

  create-nuget:
    runs-on: ubuntu-latest
    
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: false
      Configuration: Release

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # get all history here, for semantic versioning

    # Install the .NET workload
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Run local/dotnet-restore@v1
      run: dotnet restore

    - name: Run local/dotnet-build@v1
      run: dotnet build --no-restore

    - name: Run local/get-suffix@v1
      id: suffix
      run: |
        suffix=alpha
        if [ ${{ github.event_name }} == push ];
        then
          suffix=beta;
        fi

        echo "value=$suffix" >> $GITHUB_OUTPUT

    # Pack
    - name: Run local/dotnet-pack@v1
      run: dotnet pack --output ${{ github.workspace }}/nupkg -property:ComputeSemanticVersion=true -property:SemanticVersionOutputPath=${{ github.workspace }}/versions -property:SemanticVersionIncrement=ReleaseLabel --version-suffix ${{ steps.suffix.outputs.value }}

    - uses: actions/upload-artifact@v4
      with:
        name: NuPkg
        if-no-files-found: error
        retention-days: 7
        path: ${{ github.workspace }}/nupkg

    - uses: actions/upload-artifact@v4
      with:
        name: Versions
        if-no-files-found: error
        retention-days: 7
        path: ${{ github.workspace }}/versions

  push:
    runs-on: ubuntu-latest
    needs: [ create-nuget, run-tests ]
    permissions:
      packages: write
      actions: write

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_MULTILEVEL_LOOKUP: false

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: NuPkg
        path: ${{ github.workspace }}/nupkg

    - name: Run local/dotnet-push@v1
      id: push
      working-directory: ${{ github.workspace }}/nupkg
      run: dotnet nuget push *.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
      
    # delete-artifact
    - uses: GeekyEggo/delete-artifact@v4
      if: ${{ steps.push.conclusion == 'success' }}
      with:
        name: NuPkg